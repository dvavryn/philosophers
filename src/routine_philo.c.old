/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   routine_philo.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dvavryn <dvavryn@student.42vienna.com>     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/05 01:16:26 by dvavryn           #+#    #+#             */
/*   Updated: 2025/08/05 15:51:40 by dvavryn          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int		even(t_philo *philo);
int		odd(t_philo *philo);
void	solo(t_philo *philo);

void	*routine_philo(void *arg)
{
	t_philo	*philo;
	int		meals;

	meals = 0;
	philo = (t_philo *)arg;
	if (philo->data->num_philos == 1)
		return (solo(philo), NULL);
	while (1)
	{
		if (philo->id % 2 == 0)
		{
			if (even(philo))
				return (NULL);
		}
		else
		{
			if (odd(philo))
				return (NULL);
		}
	}
	return (NULL);
}

void	solo(t_philo *philo)
{
	pthread_mutex_lock(&philo->fork_one->mtx);
	safe_print(philo, "has taken a fork");
	ft_usleep(philo->data, philo->data->time_die);
}

int	even(t_philo *philo)
{
	static int meals = 0;

	safe_print(philo, "is thinking");
	pthread_mutex_lock(&philo->fork_one->mtx);
	safe_print(philo, "has taken a fork");
	pthread_mutex_lock(&philo->fork_two->mtx);
	safe_print(philo, "has taken a fork");
	pthread_mutex_lock(&philo->mtx_meal.mtx);
	philo->meals_eaten++;
	meals++;
	get_time_ms(&philo->last_meal);
	safe_print(philo, "is eating");
	pthread_mutex_unlock(&philo->mtx_meal.mtx);
	ft_usleep(philo->data, philo->data->time_eat);
	pthread_mutex_unlock(&philo->fork_two->mtx);	
	pthread_mutex_unlock(&philo->fork_one->mtx);
	if (meals == philo->data->num_meals)
		return (1);
	ft_usleep(philo->data, philo->data->time_sleep);
	safe_print(philo, "is sleeping");
	return (0);
}

int	odd(t_philo *philo)
{
	static int meals = 0;

	pthread_mutex_lock(&philo->fork_two->mtx);
	safe_print(philo, "has taken a fork");
	pthread_mutex_lock(&philo->fork_one->mtx);
	safe_print(philo, "has taken a fork");
	pthread_mutex_lock(&philo->mtx_meal.mtx);
	philo->meals_eaten++;
	meals++;
	get_time_ms(&philo->last_meal);
	safe_print(philo, "is eating");
	pthread_mutex_unlock(&philo->mtx_meal.mtx);
	ft_usleep(philo->data, philo->data->time_eat);
	pthread_mutex_unlock(&philo->fork_one->mtx);
	pthread_mutex_unlock(&philo->fork_two->mtx);
	if (meals == philo->data->num_meals)
		return (1);
	ft_usleep(philo->data, philo->data->time_sleep);
	safe_print(philo, "is sleeping");
	safe_print(philo, "is thinking");
	return (0);
}